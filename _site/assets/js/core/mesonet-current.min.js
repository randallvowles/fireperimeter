/*
mesonet-0.7.2.js
(C) 2016 MesoWest/SynopticLabs. All rights reserved.
*/
var Mesonet = function() {
    "use strict";
    function a(a) {
        this.response = {
            station: [],
            summary: {},
            tableOfContents: {},
            sensor: {
                stack: [],
                metadata: {},
                units: {}
            },
            qc: {
                flags: {},
                stack: [],
                active: [],
                metadata: {}
            }
        }, this.config = {
            fetch: {
                service: "TimeSeries",
                api_token: "not-set",
                getVariableMetadata: !0,
                getQcMetadata: !0,
                getNetworkMetadata: !1
            },
            table: {
                qcFailClass: "qc-fail",
                tableID: "tabular-data",
                tableClass: "",
                detached: "qc-codes",
                showUnits: !0,
                descend: !1,
                responseErrClass: "",
                responseErrTitleClass: "",
                responseErrTextClass: ""
            }
        }, "undefined" != typeof a && (this.config.fetch.api_token = a.token, this.config.fetch.service = a.service), this.urlArgs = this._urlArgs()
    }
    var b = {},
        c = this;
    return a.prototype._urlArgs = function() {
        var a,
            b = {},
            c = window.location.search.substring(1).split("&"),
            d = c.length;
        if (1 === window.location.search.substring(1).split("="))
            return "undefined";
        for (var e = 0; e < d; e++)
            a = c[e].split("="), "undefined" == typeof b[a[0]] && (b[a[0]] = decodeURIComponent(a[1]));
        return b
    }, a.prototype._getKeys = function(a) {
        var b = [];
        for (var c in a)
            b.push(c);
        return b
    }, a.prototype.windowArgs = function() {
        return this.urlArgs
    }, a.prototype.showResponse = function() {
        var a = this;
        return $.when(b).done(function() {
            console.log("Mesonet API response.  #nxmao"), console.log("Feature is being depreciated, please use `printResponse` instead.  #i6w70"), console.log(a.response)
        }), 0
    }, a.prototype.printResponse = function() {
        var a = this;
        return $.when(b).done(function() {
            console.log("Mesonet API response.  #nxmao"), console.log(a.response)
        }), 0
    }, a.prototype.async = function() {
        return $.when(b).done(function() {}), b
    }, a.prototype.setApiToken = function(a) {
        return this.config.fetch.api_token = a, !0
    }, a.prototype.setService = function(a) {
        try {
            this.config.fetch.service = a
        } catch (a) {
            return console.log("Failed to set API service.  #a2q48"), !1
        }
        return !0
    }, a.prototype._sortUnique = function(a) {
        if (0 === a.length)
            return a;
        a = a.sort(function(a, b) {
            return 1 * a - 1 * b
        });
        for (var b = [a[0]], c = 1; c < a.length; c++)
            a[c - 1] !== a[c] && b.push(a[c]);
        return b
    }, a.prototype.epochDate = function(a) {
        return "[object Date]" === Object.prototype.toString.call(a) ? Math.round(new Date(a).getTime() / 1e3) : "number" == typeof a ? new Date(1e3 * a) : Math.round(new Date(a).getTime() / 1e3)
    }, a.prototype.apiDateToEpoch = function(a, b) {
        var c = "";
        if ("undefined" == typeof b && (b = !1), "undefined" == typeof a)
            return !1;
        "number" == typeof a && (c = a.toString());
        var d = new Date(0);
        return d.setUTCFullYear(Number(c.slice(0, 4))), d.setUTCMonth(Number(c.slice(4, 6)) - 1), d.setUTCDate(Number(c.slice(6, 8))), b && (d.setUTCHours(Number(c.slice(8, 10))), d.setUTCMinutes(Number(c.slice(10, 12))), d.setUTCSeconds(0)), this.epochDate(d)
    }, a.prototype._has = function(a, b) {
        if ("undefined" == typeof b)
            return !1;
        var c = 0,
            d = b.length;
        for (c = 0; c < d; c++)
            if (b[c] === a)
                return !0;
        return !1
    }, a.prototype.fetch = function(a) {
        if ("undefined" == typeof a && (a = {}), "undefined" == typeof a.diagnostic && (a.diagnostic = !1), "undefined" == typeof this.config.fetch.service && "undefined" == typeof a.service)
            return console.log("No Mesonet web service set. #uil4z"), !1;
        "undefined" == typeof a.service && (a.service = this.config.fetch.service);
        var c;
        if ("undefined" == typeof a.api_args) {
            var d = this.urlArgs;
            a.api_args = {};
            for (c in d)
                a.api_args[c] = d[c]
        }
        var e = ["start", "end", "network", "time_interval"];
        for (c in a.api_args)
            this._has(c, e) && (a.api_args[c] = Number(a.api_args[c]));
        return "undefined" == typeof this.config.fetch.api_token && "undefined" == typeof a.api_args.token ? (console.log("No Mesonet API token set.  #6sgcf"), !1) : ("undefined" == typeof a.api_args.token && (a.api_args.token = this.config.fetch.api_token), b = this._apiBrokerAsyncManager(a), $.when(b).done(function() {}), b)
    }, a.prototype._apiBrokerAsyncManager = function(a) {
        function b() {
            var a = $.Deferred();
            return a.resolve(), a.promise()
        }
        function c(a) {
            function b(a, b) {
                function c(a) {
                    var b = o.qc.ledger,
                        c = a.sensor.replace(/\_qc\_+./, ""),
                        d = "F" + a.qc_flag;
                    "undefined" == typeof b.station[x].A[d] && (b.station[x].A[d] = {
                        total: 0
                    }, b.summary[d] = {
                        total: 0
                    }), "undefined" == typeof b.station[x].A[d][c] && (b.station[x].A[d][c] = 0, b.summary[d][c] = 0), "undefined" == typeof b.station[x].B[c] && (b.station[x].B[c] = {
                        total: 0
                    }, b.summary[c] = {
                        total: 0
                    }), "undefined" == typeof b.station[x].B[c][d] && (b.station[x].B[c][d] = 0, b.summary[c][d] = 0), b.station[x].A[d][c] += 1, b.station[x].A[d].total += 1, b.summary[d][c] += 1, b.station[x].B[c][d] += 1, b.station[x].B[c].total += 1, b.summary[c][d] += 1, b.summary[d].total += 1, b.summary[c].total += 1
                }
                function d(a, b, c) {
                    "undefined" == typeof c && (c = 0);
                    var d,
                        e = [];
                    for (d = 0; d < b; d++)
                        e.push(a + d * c);
                    return e
                }
                a.diagnostic === !0 && (console.log("Response parser arguments:  #2yib4"), console.log(a));
                var f,
                    i,
                    j,
                    k,
                    l,
                    m,
                    n,
                    o = e.response;
                if (1 !== b.SUMMARY.RESPONSE_CODE)
                    return console.log("Error code issued from Mesonet API. #oggi1"), console.log(b.SUMMARY.RESPONSE_MESSAGE), !1;
                if (n = "undefined" == typeof a.time_interval ? 86400 : Number(a.time_interval), "QcTypes" === a.web_service)
                    for (i = b.QCTYPES.length, f = 0; f < i; f++)
                        o.qc.metadata[Number(b.QCTYPES[f].ID)] = b.QCTYPES[f];
                else if ("Variables" === a.web_service)
                    for (o.sensor.metadata.rank = [], o.sensor.metadata.meta = {}, o.sensor.metadata.meta_vid = {}, i = b.VARIABLES.length, f = 0; f < i; f++)
                        o.sensor.metadata.rank[f] = e._getKeys(b.VARIABLES[f])[0], o.sensor.metadata.meta[e._getKeys(b.VARIABLES[f])] = b.VARIABLES[f][e._getKeys(b.VARIABLES[f])], o.sensor.metadata.meta_vid[b.VARIABLES[f][e._getKeys(b.VARIABLES[f])].vid] = b.VARIABLES[f][e._getKeys(b.VARIABLES[f])];
                else if ("QcSegments" === a.web_service) {
                    if (delete o.sensor.units, delete o.qc.active, delete o.qc.flags, o.summary = b.SUMMARY, "undefined" == typeof a.diagnostic || !a.diagnostic || "undefined" == typeof a.data_complete || !a.data_complete, "undefined" != typeof a.ledger && a.ledger && (o.qc.ledger = {
                        station: {},
                        summary: {}
                    }), "undefined" != typeof a.d3_compat && a.d3_compat ? o.station = [] : (a.d3_compat = !1, o.qc.events = {}, o.qc.time_interval = n), !a.d3_compat) {
                        var p = e.apiDateToEpoch(a.api_args.start, !0),
                            q = e.apiDateToEpoch(a.api_args.end, !0),
                            r = d(e.apiDateToEpoch(a.api_args.start, !0), Math.ceil((q - p) / n), n);
                        o.qc.time_hacks = r;
                        var s,
                            t,
                            u,
                            v,
                            w,
                            x,
                            y,
                            z;
                        for (i = b.STATION.length, f = 0; f < i; f++)
                            if (x = b.STATION[f].STID, o.qc.events[x] = {}, "undefined" != typeof a.ledger && a.ledger && (o.qc.ledger.station[x] = {
                                A: {},
                                B: {}
                            }), "undefined" != typeof b.STATION[f].QC)
                                for (k = b.STATION[f].QC.length, j = 0; j < k; j++)
                                    for (y = b.STATION[f].QC[j], v = e.epochDate(y.start), w = e.epochDate(y.end), s = Math.floor((v - p) / n), t = Math.floor((w - p) / n), u = t - s, 0 === u && (u = 1), "undefined" != typeof a.ledger && a.ledger && c(y), z = 0; z < u; z++)
                                        "undefined" == typeof o.qc.events[x][r[s + z]] && (o.qc.events[x][r[s + z]] = []), o.qc.events[x][r[s + z]].push(y)
                    }
                    var A = [];
                    if (a.diagnostic || a.data_complete || a.d3_compat)
                        for (i = b.STATION.length, f = 0; f < i; f++)
                            if (o.tableOfContents[b.STATION[f].STID] = f, o.station[f] = b.STATION[f], o.qc.segments = [], o.qc.segments[f] = b.STATION[f].QC, "undefined" != typeof b.STATION[f].QC) {
                                for (k = b.STATION[f].QC.length, j = 0; j < k; j++)
                                    A.push(b.STATION[f].QC[j].qc_flag);
                                o.qc.stack[f] = e._sortUnique(A), o.sensor.stack[f] = e._getKeys(b.STATION[f].SENSOR_VARIABLES)
                            } else
                                o.qc.stack[f] = [null], o.sensor.stack[f] = [null]
                } else if ("Metadata" === a.web_service)
                    for (delete o.qc, delete o.sensor.units, o.metadata = [], o.metadata.status = {}, o.metadata.mnetID = {}, i = b.STATION.length, f = 0; f < i; f++)
                        o.station[f] = b.STATION[f], o.sensor.stack[f] = e._getKeys(b.STATION[f].SENSOR_VARIABLES), o.metadata.status[b.STATION[f].STID] = b.STATION[f].STATUS, o.metadata.mnetID[b.STATION[f].STID] = b.STATION[f].MNET_ID, o.tableOfContents[b.STATION[f].STID] = f;
                else {
                    if ("TimeSeries" !== a.web_service && "Latest" !== a.web_service)
                        return console.log("Unsupported Mesonet service. #34wjt"), !1;
                    for (o.summary = b.SUMMARY, o.qc.active.push(!1), i = b.STATION.length, f = 0; f < i; f++) {
                        o.sensor.stack[f] = [];
                        for (m in b.STATION[f].SENSOR_VARIABLES)
                            for (l = Object.keys(b.STATION[f].SENSOR_VARIABLES[m]).sort(), j = 0; j < l.length; j++)
                                o.sensor.stack[f].push(l[j]);
                        o.qc.active[f] = b.STATION[f].QC_FLAGGED, o.station[f] = b.STATION[f], o.sensor.units[f] = b.UNITS, o.tableOfContents[b.STATION[f].STID] = f, o.qc.active[f] && (o.qc.stack[f] = e._getKeys(b.STATION[f].QC), o.qc.flags[f] = b.STATION[f].QC)
                    }
                }
                a.diagnostic === !0 && (h = performance.now(), console.log("apiBrokerEngine.haveResponse time: " + (h - g) + " ms  #xk6zr"))
            }
            var c = $.Deferred();
            a.diagnostic === !0 && (f = performance.now());
            try {
                $.ajax({
                    url: a.base_url + a.web_service_url,
                    type: "GET",
                    dataType: "JSON",
                    data: a.api_args,
                    beforeSend: function() {
                        a.diagnostic === !0 && console.log("Mesonet API request started.  #dextb")
                    },
                    complete: function(d) {
                        c.notify(this.url), a.diagnostic === !0 && (g = performance.now(), console.log("apiBrokerEngine.ajaxCall time: " + (g - f) + " ms  #mbgyx"), console.log(this.url));
                        try {
                            d = d.responseJSON
                        } catch (a) {
                            console.log("Failed to convert response to JSON.  #9ds8t")
                        }
                        return 1 !== d.SUMMARY.RESPONSE_CODE ? (console.log("Error code issued from Mesonet API. #vu0s5"), console.log(d.SUMMARY.RESPONSE_MESSAGE), console.log(this.url), !1) : (b(a, d), void c.resolve())
                    },
                    fail: function() {
                        return console.log("Fatal Ajax error. #5gigu"), console.log(this.url), console.log(this.fail), c.promise()
                    }
                })
            } catch (a) {
                console.log("Failed to connect to Mesonet API. #gl2fx"), console.log(this.url)
            }
            return c.promise()
        }
        var d = $.Deferred(),
            e = this;
        if ("undefined" == typeof a)
            return console.log("No arguments passed. #u6jpy"), d.resolve(), d.promise();
        if (a.diagnostic === !0)
            var f,
                g,
                h;
        var i,
            j,
            k,
            l = {
                diagnostic: a.diagnostic,
                web_service: a.service,
                api_args: a.api_args
            };
        if ("undefined" != typeof a.time_interval && (l.time_interval = Number(a.time_interval)), "undefined" != typeof a.ledger && a.ledger && (l.ledger = a.ledger), "undefined" != typeof a.data_complete && a.data_complete && (l.data_complete = a.data_complete), "undefined" != typeof a.d3_compat && a.d3_compat && (l.d3_compat = a.d3_compat), void 0 !== this.urlArgs.dev ? (l.base_url = "http://dev2.mesowest.net:" + this.urlArgs.dev + "/", console.log(l.web_service + " -> Dev Port: " + this.urlArgs.dev + "  #uym79")) : l.base_url = "http://api.mesowest.net/v2/", "TimeSeries" === a.service)
            l.web_service_url = "stations/timeseries?callback=?";
        else if ("Latest" === a.service)
            l.web_service_url = "stations/latest?callback=?";
        else if ("Metadata" === a.service)
            l.web_service_url = "stations/metadata?callback=?", this.config.fetch.qcTypes = !1;
        else {
            if ("QcSegments" !== a.service)
                return !1;
            l.web_service_url = "qcsegments?callback=?"
        }
        return i = c(l), a.diagnostic === !0 && (console.log("Diagnostic: Webservice arguments.  #8bd2v"), console.log(l)), j = this.config.fetch.getQcMetadata ? c({
            web_service: "QcTypes",
            base_url: l.base_url,
            web_service_url: "qctypes?callback=?",
            api_args: a.api_args
        }) : b(), k = this.config.fetch.getVariableMetadata ? c({
            web_service: "Variables",
            base_url: l.base_url,
            web_service_url: "variables?callback=?",
            api_args: a.api_args
        }) : b(), $.when(i, j, k).done(function() {
            d.resolve()
        }), d.promise()
    }, a.prototype.tabTable = function(a) {
        return c = this, $.when(b).done(function() {
            c._tabTableEmitter(a)
        }), !0
    }, a.prototype._tabTableEmitter = function(a) {
        function b(a) {
            return a.replace(/\w\S*/g, function(a) {
                return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase()
            })
        }
        function d(a) {
            if ("undefined" == typeof a.element)
                return !1;
            "undefined" == typeof a.attribute && (a.attribute = {});
            var b = document.createElement(a.element);
            if ("object" == typeof a.attribute)
                for (var c in a.attribute)
                    "parent" !== c && b.setAttribute(c, a.attribute[c]);
            if ("undefined" != typeof a.inner && b.appendChild(document.createTextNode(a.inner)), "undefined" != typeof a.attribute.parent)
                try {
                    document.getElementById(a.attribute.parent).appendChild(b)
                } catch (b) {
                    console.log("Can not connect to " + a.attribute.parent + " in the DOM tree.  #lskpx")
                }
            return b
        }
        function e(a, b) {
            var c = 0,
                d = b.length;
            for (c = 0; c < d; c++)
                if (b[c] === a)
                    return !0;
            return !1
        }
        var f = c.response;
        c.config.table;
        if ("undefined" == typeof a)
            return console.log("No arguments defined.  #nghyt"), !1;
        if ("undefined" == typeof a.options || "undefined" == typeof a.options.container_id)
            return console.log("No container ID.  #eofa9"), !1;
        if ("undefined" == typeof a.options.table_id && (a.options.table_id = "timeseries-table"), "undefined" == typeof f.summary || 1 !== f.summary.RESPONSE_CODE)
            return d({
                element: "P",
                attribute: {
                    parent: a.options.container_id
                },
                inner: f.summary.RESPONSE_MESSAGE
            }), console.log("No data avaiable to generate table.  #3luv5"), console.log(f.response.summary), !1;
        if ("undefined" != typeof document.getElementById(a.options.table_id))
            try {
                document.getElementById(a.options.container_id).innerHTML = "", document.getElementById(a.options.qc_container).innerHTML = ""
            } catch (b) {
                console.log("Can not connect to " + a.options.table_id + " in the DOM tree. #91os6")
            }
        var g,
            h,
            i,
            j,
            k,
            l,
            m,
            n = 0,
            o = f.station[n].OBSERVATIONS,
            p = ["date_time"],
            q = ["Time"],
            r = [""],
            s = [],
            t = 0;
        for (j = f.sensor.metadata.rank.length, g = 0; g < j; g++)
            for (k = f.sensor.metadata.rank[g], i = f.sensor.stack[n].length, h = 0; h < i; h++)
                f.sensor.stack[n][h].match(/.+?(?=\_set\_.)/) == k && (t = f.sensor.stack[n][h].match(/(?=\_set\_.)?\d+/), t > 1 ? (p.push(f.sensor.stack[n][h]), r.push(f.sensor.units[n][k]), q.push(f.sensor.metadata.meta[k].long_name + " (" + t + ")")) : (p.push(f.sensor.stack[n][h]), r.push(f.sensor.units[n][k]), q.push(f.sensor.metadata.meta[k].long_name)));
        if (p.lenth !== i)
            for (g = 0; g < i; g++)
                k = f.sensor.stack[n][g], e(k, p) || (p.push(k), r.push(f.sensor.units[n][k.match(/.+?(?=\_set\_.)/)]), l = k.match(/.+?(?=\_set\_.)/)[0].replace(/\_/gi, " "), q.push(b(l) + "^"));
        d({
            element: "TABLE",
            attribute: {
                id: a.options.table_id,
                parent: a.options.container_id,
                class: a.options.table_class
            }
        }), d({
            element: "THEAD",
            attribute: {
                parent: a.options.table_id
            }
        }), d({
            element: "TBODY",
            attribute: {
                parent: a.options.table_id
            }
        });
        var u;
        for (j = o.date_time.length + 1, g = 0; g < j; g++)
            if (0 === g)
                for (i = f.sensor.stack[n].length, document.getElementById(a.options.table_id).getElementsByTagName("thead")[0].appendChild(document.createElement("TR")), u = document.getElementById(a.options.table_id).getElementsByTagName("tr")[g], h = 0; h < i; h++)
                    u.appendChild(document.createElement("TH")).appendChild(document.createTextNode(q[h]));
            else
                for (document.getElementById(a.options.table_id).getElementsByTagName("tbody")[0].appendChild(document.createElement("TR")), f.station[n].OBSERVATIONS[p[0]][g - 1] > f.station[n].OBSERVATIONS[p[0]][g] && "undefined" != typeof a.options.day_change_class && document.getElementById(a.options.table_id).getElementsByTagName("tr")[g].setAttribute("class", a.options.day_change_class), h = 0; h < i; h++)
                    l = f.station[n].OBSERVATIONS[p[h]][g - 1], null === l && (l = ""), f.qc.active[n] && e(p[h], f.qc.stack[n]) ? (m = f.qc.flags[n][p[h]][g - 1], null !== m ? (l = l + " (" + m + ")", u = d({
                        element: "TD",
                        attribute: {
                            class: a.options.qc_flag_class
                        },
                        inner: l
                    }), s.push(f.qc.flags[n][p[h]][g - 1])) : (l = f.station[n].OBSERVATIONS[p[h]][g - 1], u = d({
                        element: "TD",
                        inner: l
                    }))) : u = d({
                        element: "TD",
                        inner: l
                    }), document.getElementById(a.options.table_id).getElementsByTagName("tr")[g].appendChild(u);
        if ("undefined" != typeof a.options.show_units && a.options.show_units) {
            var v = document.getElementById(a.options.table_id).getElementsByTagName("tbody")[0].insertRow(0);
            for (j = r.length, g = 0; g < j; g++) {
                var w = v.insertCell(g);
                w.innerHTML = r[g]
            }
        }
        if ("undefined" != typeof a.options.qc_container && f.qc.active[n]) {
            var x = [];
            for (g = 0; g < s.length; g++)
                for (h = 0; h < s[g].length; h++)
                    x.push(s[g][h]);
            for (x = this._sortUnique(x), d({
                element: "UL",
                attribute: {
                    parent: a.options.qc_container,
                    id: "qcListing111"
                }
            }), g = 0; g < x.length; g++)
                d({
                    element: "LI",
                    attribute: {
                        parent: "qcListing111"
                    },
                    inner: "(" + f.qc.metadata[x[g]].ID + ")  " + f.qc.metadata[x[g]].NAME
                })
        }
    }, a
}();
